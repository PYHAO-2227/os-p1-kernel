diff --git a/src/exp4b/Makefile b/src/exp4b/Makefile
deleted file mode 120000
index 840776f..0000000
--- a/src/exp4b/Makefile
+++ /dev/null
@@ -1 +0,0 @@
-Makefile.qemu
\ No newline at end of file
diff --git a/src/exp4b/Makefile b/src/exp4b/Makefile
new file mode 100644
index 0000000..ccd1ce0
--- /dev/null
+++ b/src/exp4b/Makefile
@@ -0,0 +1,31 @@
+ARMGNU ?= aarch64-linux-gnu
+
+COPS = -Wall -Werror -nostdlib -nostartfiles -ffreestanding -Iinclude -mgeneral-regs-only -g -O0 -DUSE_QEMU
+ASMOPS = -Iinclude  -g -DUSE_QEMU
+
+BUILD_DIR = build
+SRC_DIR = src
+
+all : kernel8.img
+
+clean :
+	rm -rf $(BUILD_DIR) *.img 
+
+$(BUILD_DIR)/%_c.o: $(SRC_DIR)/%.c
+	mkdir -p $(@D)
+	$(ARMGNU)-gcc $(COPS) -MMD -c $< -o $@
+
+$(BUILD_DIR)/%_s.o: $(SRC_DIR)/%.S
+	$(ARMGNU)-gcc $(ASMOPS) -MMD -c $< -o $@
+
+C_FILES = $(wildcard $(SRC_DIR)/*.c)
+ASM_FILES = $(wildcard $(SRC_DIR)/*.S)
+OBJ_FILES = $(C_FILES:$(SRC_DIR)/%.c=$(BUILD_DIR)/%_c.o)
+OBJ_FILES += $(ASM_FILES:$(SRC_DIR)/%.S=$(BUILD_DIR)/%_s.o)
+
+DEP_FILES = $(OBJ_FILES:%.o=%.d)
+-include $(DEP_FILES)
+
+kernel8.img: $(SRC_DIR)/linker-qemu.ld $(OBJ_FILES)
+	$(ARMGNU)-ld -T $(SRC_DIR)/linker-qemu.ld -o $(BUILD_DIR)/kernel8.elf  $(OBJ_FILES)
+	$(ARMGNU)-objcopy $(BUILD_DIR)/kernel8.elf -O binary kernel8.img
diff --git a/src/exp4b/include/irq.h b/src/exp4b/include/irq.h
index 0e35437..5a9bb78 100644
--- a/src/exp4b/include/irq.h
+++ b/src/exp4b/include/irq.h
@@ -6,5 +6,8 @@ void enable_interrupt_controller( void );
 void irq_vector_init( void );
 void enable_irq( void );
 void disable_irq( void );
+extern void save_record_in(void);
+extern void save_record_out(void);
+extern void save_record_out_first(void);
 
 #endif  /*_IRQ_H */
diff --git a/src/exp4b/include/sched.h b/src/exp4b/include/sched.h
index 3885ee3..dcb763c 100644
--- a/src/exp4b/include/sched.h
+++ b/src/exp4b/include/sched.h
@@ -11,9 +11,15 @@
 
 #define FIRST_TASK task[0]
 #define LAST_TASK task[NR_TASKS-1]
-
+// Todo define record array
 #define TASK_RUNNING				0
 
+// Define the size of the record array
+#define MAX_CONTEXT_SWITCHES 52
+extern struct switch_record *cur_record;
+extern struct switch_record * records[MAX_CONTEXT_SWITCHES];
+extern int record_num;
+
 extern struct task_struct *current;
 extern struct task_struct * task[NR_TASKS];
 extern int nr_tasks;
@@ -34,12 +40,25 @@ struct cpu_context {
 	unsigned long pc;
 };
 
+// Todo: add Waiting state
 struct task_struct {
 	struct cpu_context cpu_context;
 	long state;	
 	long counter; /* countdown for scheduling. higher value means having run for less. recharged in schedule(). decremented in timer_tick(). always non negative */
 	long priority;
 	long preempt_count;
+	int pid;
+};
+
+// Todo record_struct
+struct switch_record {
+	unsigned long timestamp; 
+    int task_in_id;
+    int task_out_id;
+    unsigned long task_in_pc;
+    unsigned long task_out_pc;
+    unsigned long task_in_sp;
+    unsigned long task_out_sp;
 };
 
 extern void sched_init(void);
@@ -49,10 +68,24 @@ extern void preempt_disable(void);
 extern void preempt_enable(void);
 extern void switch_to(struct task_struct* next);
 extern void cpu_switch_to(struct task_struct* prev, struct task_struct* next);
+extern int get_pid(void);
+extern unsigned long get_time_ms(void);
+extern void init_records(void);
+unsigned long get_cntpct(void);
 
 #define INIT_TASK \
 /*cpu_context*/	{ {0,0,0,0,0,0,0,0,0,0,0,0,0}, \
-/* state etc */	0,0,1, 0 \
+/* state etc */	0,0,1,0,0 \
+}
+
+#define INIT_RECORD { \
+    .timestamp = 0, \
+    .task_in_id = 0, \
+    .task_out_id = 0, \
+    .task_in_pc = 0, \
+    .task_out_pc = 0, \
+    .task_in_sp = 0, \
+    .task_out_sp = 0 \
 }
 
 #endif
diff --git a/src/exp4b/include/utils.h b/src/exp4b/include/utils.h
index 20fb61f..731409d 100644
--- a/src/exp4b/include/utils.h
+++ b/src/exp4b/include/utils.h
@@ -5,5 +5,10 @@ extern void delay ( unsigned long);
 extern void put32 ( unsigned long, unsigned int );
 extern unsigned int get32 ( unsigned long );
 extern int get_el ( void );
+extern unsigned long get_sp(void);
+extern unsigned long get_pc(void);
+extern unsigned long get_pc_out(void);
+extern unsigned long get_pc_first(void);
+extern unsigned long get_sp_first(void);
 
 #endif  /*_UTILS_H */
diff --git a/src/exp4b/src/entry.S b/src/exp4b/src/entry.S
index c85164f..827f2fa 100644
--- a/src/exp4b/src/entry.S
+++ b/src/exp4b/src/entry.S
@@ -37,16 +37,15 @@
 
 	stp	x30, x22, [sp, #16 * 15] 
 	str	x23, [sp, #16 * 16]
+	bl save_record_in
 	.endm
 
 	.macro	kernel_exit
 	ldr	x23, [sp, #16 * 16]
 	ldp	x30, x22, [sp, #16 * 15] 
-
 	msr	elr_el1, x22			
 	msr	spsr_el1, x23
 
-	ldp	x0, x1, [sp, #16 * 0]
 	ldp	x2, x3, [sp, #16 * 1]
 	ldp	x4, x5, [sp, #16 * 2]
 	ldp	x6, x7, [sp, #16 * 3]
@@ -61,6 +60,9 @@
 	ldp	x24, x25, [sp, #16 * 12]
 	ldp	x26, x27, [sp, #16 * 13]
 	ldp	x28, x29, [sp, #16 * 14]
+	bl save_record_out
+	ldp	x0, x1, [sp, #16 * 0]
+	ldp	x30, x22, [sp, #16 * 15] 
 	add	sp, sp, #S_FRAME_SIZE		
 	eret
 	.endm
@@ -140,11 +142,12 @@ error_invalid_el0_32:
 el1_irq:
 	kernel_entry 
 	bl	handle_irq
-	kernel_exit 
+	kernel_exit
 
 .globl ret_from_fork
 ret_from_fork:
 	bl	schedule_tail
+	bl save_record_out_first;
 	mov	x0, x20
 	blr	x19 		//should never return
 
diff --git a/src/exp4b/src/fork.c b/src/exp4b/src/fork.c
index 472b389..778662e 100644
--- a/src/exp4b/src/fork.c
+++ b/src/exp4b/src/fork.c
@@ -2,6 +2,7 @@
 #include "sched.h"
 #include "entry.h"
 
+// Todo: add the initial record to trace each task;
 int copy_process(unsigned long fn, unsigned long arg)
 {
 	preempt_disable();
@@ -20,6 +21,7 @@ int copy_process(unsigned long fn, unsigned long arg)
 	p->cpu_context.pc = (unsigned long)ret_from_fork;
 	p->cpu_context.sp = (unsigned long)p + THREAD_SIZE;
 	int pid = nr_tasks++;
+	p->pid = pid;
 	task[pid] = p;	
 	preempt_enable();
 	return 0;
diff --git a/src/exp4b/src/irq.c b/src/exp4b/src/irq.c
index 1c9c98e..6b36fc2 100644
--- a/src/exp4b/src/irq.c
+++ b/src/exp4b/src/irq.c
@@ -3,6 +3,18 @@
 #include "timer.h"
 #include "entry.h"
 #include "peripherals/irq.h"
+#include "sched.h"
+
+void print_record(struct switch_record * record) {
+    printf("%d from task%d (PC 0x%X SP 0x%X) to task%d (PC 0x%X SP 0x%X)\r\n",
+           record->timestamp,
+           record->task_in_id,
+           record->task_in_pc,
+           record->task_in_sp,
+           record->task_out_id,
+           record->task_out_pc,
+           record->task_out_sp);
+}
 
 const char *entry_error_messages[] = {
     "SYNC_INVALID_EL1t",
@@ -39,6 +51,12 @@ void show_invalid_entry_message(int type, unsigned long esr, unsigned long addre
 
 void handle_irq(void)
 {
+	// If number of record is lager than 50, make the kernel in idle instead of reset the timer.
+	if (record_num > 50) {
+        for (int i = 0; i < MAX_CONTEXT_SWITCHES; i++) {
+            print_record(records[i]);
+        }
+	}
     // Each Core has its own pending local intrrupts register
     unsigned int irq = get32(INT_SOURCE_0);
     switch (irq) {
@@ -48,4 +66,45 @@ void handle_irq(void)
         default:
             printf("Unknown pending irq: %x\r\n", irq);
     }
+}
+
+// Todo: add save in and out functions
+void save_record_in(void) {
+    printf("\r\n Irq in \r\n");
+    cur_record->timestamp = get_time_ms();
+    printf("timestamp = %d\r\n", cur_record->timestamp);
+    cur_record->task_in_id = get_pid();
+    printf("task_in_pid = %d\r\n", cur_record->task_in_id);
+    cur_record->task_in_pc = get_pc();
+    printf("task_in_pc = %X\r\n", cur_record->task_in_pc);
+    cur_record->task_in_sp = get_sp() - S_FRAME_SIZE;
+    printf("task_in_sp = %X\r\n", cur_record->task_in_sp);
+}
+
+void save_record_out(void) {
+    printf("\r\n Irq out \r\n");
+    cur_record->task_out_id = get_pid();
+    printf("task_out_pid = %d\r\n", cur_record->task_out_id);
+    cur_record->task_out_pc = get_pc_out();
+    printf("task_out_pc = %X\r\n", cur_record->task_out_pc);
+    cur_record->task_out_sp = get_sp() + S_FRAME_SIZE;
+    printf("task_out_sp = %X\r\n", cur_record->task_out_sp);
+    record_num++;
+    printf("Cur record num = %d\r\n", record_num);
+    cur_record = records[record_num];
+}
+
+void save_record_out_first(void) {
+    if (record_num < 4) {
+        // printf("\r\n Irq out \r\n");
+        cur_record->task_out_id = get_pid();
+        // printf("task_out_pid = %d\r\n", cur_record->task_out_id);
+        cur_record->task_out_pc = current->cpu_context.x19;
+        // printf("task_out_pc = %X\r\n", cur_record->task_out_pc);
+        cur_record->task_out_sp = current->cpu_context.sp;
+        // printf("task_out_sp = %X\r\n", cur_record->task_out_sp);
+        record_num++;
+        // printf("Cur record num = %d\r\n", record_num);
+        cur_record = records[record_num];
+    }
 }
\ No newline at end of file
diff --git a/src/exp4b/src/kernel.c b/src/exp4b/src/kernel.c
index ae50ca0..40d8d48 100644
--- a/src/exp4b/src/kernel.c
+++ b/src/exp4b/src/kernel.c
@@ -6,13 +6,17 @@
 #include "sched.h"
 #include "mini_uart.h"
 
+// Todo: Add more process
+// 104 from task0 (PC 0x82158 SP 0x3FFFC0) to task1 (PC 0x101B30 SP 0x401000)
+// 205 from task1 (PC 0x82158 SP 0x400FB0) to task2 (PC 0x101B60 SP 0x402000)void process(char *array)
 void process(char *array)
-{
+{	
 	while (1) {
 		for (int i = 0; i < 5; i++){
 			uart_send(array[i]);
 			delay(5000000);
 		}
+		printf("\nBack to process\r\n");
 	}
 }
 
@@ -23,6 +27,29 @@ void process2(char *array)
 			uart_send(array[i]);
 			delay(5000000);
 		}
+		printf("\nBack to process\r\n");
+	}
+}
+
+void process3(char *array)
+{
+	while (1) {
+		for (int i = 0; i < 5; i++){
+			uart_send(array[i]);
+			delay(5000000);
+		}
+		printf("\nBack to process\r\n");
+	}
+}
+
+void process4(char *array)
+{
+	while (1) {
+		for (int i = 0; i < 5; i++){
+			uart_send(array[i]);
+			delay(5000000);
+		}
+		printf("\nBack to process\r\n");
 	}
 }
 
@@ -32,7 +59,9 @@ void kernel_main(void)
 	init_printf(0, putc);
 
 	printf("kernel boots\n");
-
+	// Init the records array;
+	init_records();
+	printf("Records array init");
 	irq_vector_init();
 	generic_timer_init();
 	enable_interrupt_controller();
@@ -49,7 +78,25 @@ void kernel_main(void)
 		return;
 	}
 
+	res = copy_process((unsigned long)&process3, (unsigned long)"98765");
+	if (res != 0) {
+		printf("error while starting process 3");
+		return;
+	}
+
+	res = copy_process((unsigned long)&process4, (unsigned long)"qwert");
+	if (res != 0) {
+		printf("error while starting process 4");
+		return;
+	}
+	// Tode: change the while loop into IDLE
 	while (1){
-		schedule();
+		// IDLE, wait for the first irq
+		if (record_num > 50) {
+			printf("The kernel task is going to idle\n\r");
+			disable_irq();
+			asm volatile("wfi"); // Be idle
+		}
+		delay(50000);
 	}	
 }
diff --git a/src/exp4b/src/sched.S b/src/exp4b/src/sched.S
index 669b5c8..67f32b5 100644
--- a/src/exp4b/src/sched.S
+++ b/src/exp4b/src/sched.S
@@ -23,3 +23,7 @@ cpu_switch_to:
 	mov	sp, x9
 	ret							// branch to LR (which was just loaded from memory)
 
+.globl get_cntpct
+get_cntpct:
+	mrs x0, cntpct_el0
+	ret
diff --git a/src/exp4b/src/sched.c b/src/exp4b/src/sched.c
index 7fbf9fc..3e5840d 100644
--- a/src/exp4b/src/sched.c
+++ b/src/exp4b/src/sched.c
@@ -2,11 +2,27 @@
 #include "irq.h"
 #include "printf.h"
 
+// Todo init the first record and record array
 static struct task_struct init_task = INIT_TASK;
 struct task_struct *current = &(init_task);
 struct task_struct * task[NR_TASKS] = {&(init_task), };
 int nr_tasks = 1;
 
+static struct switch_record preallocated_records[MAX_CONTEXT_SWITCHES];
+struct switch_record *records[MAX_CONTEXT_SWITCHES];
+struct switch_record *cur_record;
+int record_num = 0;
+
+void init_records() {
+    // Init records
+    for (int i = 0; i < MAX_CONTEXT_SWITCHES; i++) {
+        records[i] = &preallocated_records[i];
+    }
+    cur_record = records[0];
+}
+
+int second = (1 << 26);
+
 void preempt_disable(void)
 {
 	current->preempt_count++;
@@ -17,6 +33,17 @@ void preempt_enable(void)
 	current->preempt_count--;
 }
 
+// Get id for the current task
+int get_pid(void)
+{
+	return current->pid;
+}
+// Get timestamp
+unsigned long get_time_ms(void) {
+    unsigned long cntpct;
+    cntpct = get_cntpct();
+    return cntpct / (second / 1000);
+}
 
 void _schedule(void)
 {
@@ -88,6 +115,8 @@ void switch_to(struct task_struct * next)
 			80d58:       9400083b        bl      82e44 <cpu_switch_to>
 		==> 80d5c:       14000002        b       80d64 <switch_to+0x58>
 	*/
+
+	//Here is where we left
 	cpu_switch_to(prev, next);  /* will branch to @next->cpu_context.pc ...*/
 }
 
diff --git a/src/exp4b/src/timer.c b/src/exp4b/src/timer.c
index 4c09244..3c69364 100644
--- a/src/exp4b/src/timer.c
+++ b/src/exp4b/src/timer.c
@@ -4,8 +4,10 @@
 #include "peripherals/timer.h"
 #include "timer.h"
 
+
+// Todo： Set the interval of rescheduling to be roughly 100 ms. 
 #ifdef USE_QEMU
-int interval = (1 << 26); // xzl: around 1 sec
+int interval = (1 << 26) / 10; // change the interval to be 100ms = 1s / 10
 #else
 int interval = 1 * 1000 * 1000; // xzl: around 1 sec
 #endif
@@ -22,9 +24,14 @@ void generic_timer_init ( void )
 }
 
 void handle_generic_timer_irq( void ) 
-{
-	gen_timer_reset(interval);
-    timer_tick();
+{	
+	if (record_num > 50) {
+		switch_to(task[0]);
+		gen_timer_reset((1 << 30));
+	} else {
+		gen_timer_reset(interval);
+    	timer_tick();
+	}
 }
 
 /* 
diff --git a/src/exp4b/src/utils.S b/src/exp4b/src/utils.S
index 44be485..5b4f9e1 100644
--- a/src/exp4b/src/utils.S
+++ b/src/exp4b/src/utils.S
@@ -19,3 +19,29 @@ delay:
 	subs x0, x0, #1
 	bne delay
 	ret
+
+.globl get_sp
+get_sp:
+	mov x0, sp
+	ret
+
+.globl get_pc
+get_pc:
+	mrs x0, elr_el1
+	ret
+
+.globl get_pc_out
+get_pc_out:
+	mrs x0, elr_el1
+	ret
+
+.globl get_pc_first
+get_pc_first:
+	// ldr x0, [x8]
+	mov x0, x19
+	ret
+
+.globl get_sp_first
+get_sp_first:
+	mov x0, x9
+	ret
